{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, Mesh, PerspectiveCamera, MathUtils, OrthographicCamera, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three'; //trackball state\n\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {Camera} camera Virtual camera used in the scene\n * @param {HTMLElement} domElement Renderer's dom element\n * @param {Scene} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, domElement, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_downStart\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"enableGizmos\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera !== null) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n\n        if (child instanceof Mesh) {\n          child.geometry = curveGeometry;\n        }\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n\n        this._downStart = performance.now();\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp != null) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState != null) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      if (this.enabled && this.enableZoom) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp != null) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n\n                if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid != null) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid != null) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onKeyDown\", event => {\n      if (event.key == 'c') {\n        if (event.ctrlKey || event.metaKey) {\n          this.copyState();\n        }\n      } else if (event.key == 'v') {\n        if (event.ctrlKey || event.metaKey) {\n          this.pasteState();\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera !== null) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera !== null) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!(this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) || !this.enableZoom) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.FOV, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera !== null) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera !== null) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene != null && this.camera !== null) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP != null && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP != null && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera !== null) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera !== null) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera !== null) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera !== null) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"compareMouseAction\", (action1, action2) => {\n      if (action1.operation == action2.operation) {\n        if (action1.mouse == action2.mouse && action1.key == action2.key) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"unsetMouseAction\", (mouse, key = null) => {\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == mouse && this.mouseActions[i].key == key) {\n          this.mouseActions.splice(i, 1);\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key != null) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key != null) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera' && camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera' && camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera !== null) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene != null) {\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera !== null) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      this.domElement.removeEventListener('pointerdown', this.onPointerDown);\n      this.domElement.removeEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.removeEventListener('wheel', this.onWheel);\n      this.domElement.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      window.addEventListener('keydown', this.onKeyDown);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid != null && this.scene != null) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      const gizmoX = this._gizmos.children[0];\n      const gizmoY = this._gizmos.children[1];\n      const gizmoZ = this._gizmos.children[2];\n\n      if (isActive) {\n        gizmoX.material.setValues({\n          opacity: 1\n        });\n        gizmoY.material.setValues({\n          opacity: 1\n        });\n        gizmoZ.material.setValues({\n          opacity: 1\n        });\n      } else {\n        gizmoX.material.setValues({\n          opacity: 0.6\n        });\n        gizmoY.material.setValues({\n          opacity: 0.6\n        });\n        gizmoZ.material.setValues({\n          opacity: 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera' && camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n\n        if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n          this.camera.updateProjectionMatrix();\n        } //making gizmos\n\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if ((this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera !== null) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      let state;\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        state = JSON.stringify({\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        state = JSON.stringify({\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n      }\n\n      if (state !== undefined) {\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n        this._cameraMatrixState0.copy(this.camera.matrix);\n\n        this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n        this._nearPos = this.camera.near;\n        this._farPos = this.camera.far;\n        this._zoom0 = this.camera.zoom;\n\n        this._up0.copy(this.camera.up);\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this._fov0 = this.camera.fov;\n        }\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera !== null) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if ((camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) && this.scene != null) {\n        const raycaster = new Raycaster();\n        raycaster.near = camera.near;\n        raycaster.far = camera.far;\n        raycaster.setFromCamera(cursor, camera);\n        const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n        for (let i = 0; i < intersect.length; i++) {\n          if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face != null) {\n            return intersect[i].point.clone();\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      } else if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      } else if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (this.camera !== null) {\n        //update camera and gizmos state\n        this._cameraMatrixState.copy(this.camera.matrix);\n\n        this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n          this.camera.updateProjectionMatrix();\n          this._zoomState = this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this._fovState = this.camera.fov;\n        }\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      var _this$camera2;\n\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera !== null) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      } //check min/max parameters\n\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n\n            if (child instanceof Mesh) {\n              child.geometry = curveGeometry;\n            }\n          }\n        }\n      }\n\n      (_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState != undefined && (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera)) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._downStart = 0; //pointerDown time\n\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.enableGizmos = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene != null) {\n      this.scene.add(this._gizmos);\n    }\n\n    this.domElement.style.touchAction = 'none';\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    this.domElement.addEventListener('contextmenu', this.onContextMenu);\n    this.domElement.addEventListener('wheel', this.onWheel);\n    this.domElement.addEventListener('pointerdown', this.onPointerDown);\n    this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n\n\n  applyTransformMatrix(transformation) {\n    if ((transformation === null || transformation === void 0 ? void 0 : transformation.camera) != null && this.camera !== null) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if ((transformation === null || transformation === void 0 ? void 0 : transformation.gizmos) != null) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera)) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n\n\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n\n\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera != null) {\n      if (_transformation.camera != null) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos != null) {\n      if (_transformation.gizmos != null) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/reactportfoliowebsite/React Portfolio Website/node_modules/three-stdlib/controls/ArcballControls.js"],"names":["_defineProperty","Matrix4","EventDispatcher","EllipseCurve","BufferGeometry","Mesh","PerspectiveCamera","MathUtils","OrthographicCamera","Vector3","GridHelper","LineBasicMaterial","Line","Raycaster","Vector2","Quaternion","Group","Box3","Sphere","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","constructor","_camera","domElement","scene","scale","_gizmos","z","tbRadius","calculateTbRadius","undefined","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","length","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","_downStart","performance","now","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","enableZoom","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","scalePoint","isOrthographicCamera","_this$unprojectOnTbPl","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","isPerspectiveCamera","_this$unprojectOnTbPl2","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","key","copyState","pasteState","operation","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_this$camera","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","_this$unprojectOnTbPl3","zRotate","_startFingerDistance","_currentFingerDistance","_this$unprojectOnTbPl4","_this$unprojectOnTbPl5","nFingers","setMouseAction","action1","action2","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","_this$scene","onPointerDown","onPointerCancel","onWheel","onContextMenu","onWindowResize","onKeyDown","remove","isActive","gizmoX","gizmoY","gizmoZ","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","value","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","_this$camera2","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","enableGizmos","Infinity","setCamera","style","touchAction","devicePixelRatio","initializeMouseActions","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, Mesh, PerspectiveCamera, MathUtils, OrthographicCamera, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {Camera} camera Virtual camera used in the scene\n * @param {HTMLElement} domElement Renderer's dom element\n * @param {Scene} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, domElement, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_downStart\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"enableGizmos\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera !== null) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n\n        if (child instanceof Mesh) {\n          child.geometry = curveGeometry;\n        }\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n\n        this._downStart = performance.now();\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp != null) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState != null) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      if (this.enabled && this.enableZoom) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp != null) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n\n                if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid != null) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid != null) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onKeyDown\", event => {\n      if (event.key == 'c') {\n        if (event.ctrlKey || event.metaKey) {\n          this.copyState();\n        }\n      } else if (event.key == 'v') {\n        if (event.ctrlKey || event.metaKey) {\n          this.pasteState();\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera !== null) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera !== null) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!(this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) || !this.enableZoom) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.FOV, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) {\n              return;\n            }\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera !== null) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera !== null) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene != null && this.camera !== null) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP != null && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP != null && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera !== null) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera !== null) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera !== null) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera !== null) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"compareMouseAction\", (action1, action2) => {\n      if (action1.operation == action2.operation) {\n        if (action1.mouse == action2.mouse && action1.key == action2.key) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"unsetMouseAction\", (mouse, key = null) => {\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == mouse && this.mouseActions[i].key == key) {\n          this.mouseActions.splice(i, 1);\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key != null) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key != null) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera' && camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera' && camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera !== null) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene != null) {\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera !== null) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      this.domElement.removeEventListener('pointerdown', this.onPointerDown);\n      this.domElement.removeEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.removeEventListener('wheel', this.onWheel);\n      this.domElement.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      window.addEventListener('keydown', this.onKeyDown);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid != null && this.scene != null) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      const gizmoX = this._gizmos.children[0];\n      const gizmoY = this._gizmos.children[1];\n      const gizmoZ = this._gizmos.children[2];\n\n      if (isActive) {\n        gizmoX.material.setValues({\n          opacity: 1\n        });\n        gizmoY.material.setValues({\n          opacity: 1\n        });\n        gizmoZ.material.setValues({\n          opacity: 1\n        });\n      } else {\n        gizmoX.material.setValues({\n          opacity: 0.6\n        });\n        gizmoY.material.setValues({\n          opacity: 0.6\n        });\n        gizmoZ.material.setValues({\n          opacity: 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera' && camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n\n        if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n          this.camera.updateProjectionMatrix();\n        } //making gizmos\n\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if ((this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera !== null) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      let state;\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        state = JSON.stringify({\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        state = JSON.stringify({\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n      }\n\n      if (state !== undefined) {\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera) {\n        this._cameraMatrixState0.copy(this.camera.matrix);\n\n        this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n        this._nearPos = this.camera.near;\n        this._farPos = this.camera.far;\n        this._zoom0 = this.camera.zoom;\n\n        this._up0.copy(this.camera.up);\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this._fov0 = this.camera.fov;\n        }\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera !== null) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if ((camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) && this.scene != null) {\n        const raycaster = new Raycaster();\n        raycaster.near = camera.near;\n        raycaster.far = camera.far;\n        raycaster.setFromCamera(cursor, camera);\n        const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n        for (let i = 0; i < intersect.length; i++) {\n          if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face != null) {\n            return intersect[i].point.clone();\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      } else if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      } else if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (this.camera !== null) {\n        //update camera and gizmos state\n        this._cameraMatrixState.copy(this.camera.matrix);\n\n        this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n        if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n          this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n          this.camera.updateProjectionMatrix();\n          this._zoomState = this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this._fovState = this.camera.fov;\n        }\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      var _this$camera2;\n\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera !== null) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      } //check min/max parameters\n\n\n      if (this.camera instanceof OrthographicCamera && this.camera.isOrthographicCamera) {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      } else if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n\n            if (child instanceof Mesh) {\n              child.geometry = curveGeometry;\n            }\n          }\n        }\n      }\n\n      (_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState != undefined && (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera)) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera instanceof PerspectiveCamera && this.camera.isPerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._downStart = 0; //pointerDown time\n\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.enableGizmos = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene != null) {\n      this.scene.add(this._gizmos);\n    }\n\n    this.domElement.style.touchAction = 'none';\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    this.domElement.addEventListener('contextmenu', this.onContextMenu);\n    this.domElement.addEventListener('wheel', this.onWheel);\n    this.domElement.addEventListener('pointerdown', this.onPointerDown);\n    this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if ((transformation === null || transformation === void 0 ? void 0 : transformation.camera) != null && this.camera !== null) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if ((transformation === null || transformation === void 0 ? void 0 : transformation.gizmos) != null) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && (this.camera instanceof PerspectiveCamera || this.camera instanceof OrthographicCamera)) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera != null) {\n      if (_transformation.camera != null) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos != null) {\n      if (_transformation.gizmos != null) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };\n"]},"metadata":{},"sourceType":"module"}